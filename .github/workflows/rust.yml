name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    name: Build and Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Only run beta on Ubuntu to reduce CI load
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          pkg-config \
          libssl-dev \
          build-essential
    
    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install pkg-config
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
    
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: ~/.cargo/registry
        key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-registry-
    
    - name: Cache cargo index
      uses: actions/cache@v3
      with:
        path: ~/.cargo/git
        key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-index-
    
    - name: Cache cargo build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-target-
    
    - name: Check
      run: cargo check --verbose
    
    - name: Build
      run: cargo build --verbose
    
    - name: Run tests
      run: cargo test --verbose

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-${{ runner.os }}-${{ matrix.rust }}
        path: |
          target/release
          target/debug

  lint:
    name: Lint (fmt & clippy)
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          libasound2-dev \
          pkg-config \
          libssl-dev \
          build-essential
    - uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        components: rustfmt, clippy
    - name: Check formatting
      run: cargo fmt --all -- --check
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - uses: dtolnay/rust-toolchain@stable
    - name: Install cargo-audit
      run: cargo install cargo-audit
    - name: Run security audit
      # RUSTSEC-2023-0071 (Marvin attack on RSA) is ignored here because Librespot's
      # use of the `rsa` crate is limited to verifying Spotify's *public* key during
      # client-side handshakes (core/src/connection/handshake.rs). This operation does
      # not involve Librespot's own private key or decrypting attacker-controlled
      # ciphertext, so the timing attack is not applicable.
      #
      # The Zeroconf discovery service in Librespot is unencrypted and does not use RSA
      # for decryption, removing another possible attack surface. For the Marvin attack
      # to be relevant, Librespot would need to act as a server that accepts and
      # decrypts malicious RSA ciphertexts with its own private key — which it does not.
      #
      # This ignore is safe given the current codebase, but should be revisited if
      # Librespot’s RSA usage changes in the future.
      run: cargo audit --ignore RUSTSEC-2023-0071
